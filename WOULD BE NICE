WOULD BE NICE

    -----------------------------------------

    Probably best to just assume the input is empty vs. holding the previous input

    -----------------------------------------

    If the client delivers too many late inputs in one second tell the client to reconnect.

    -----------------------------------------

    Client should not send any input until it has synchronized.

    Right now it tries to send inputs before sync. This is pointless and annoying.

    -----------------------------------------

    It would be much nicer to have separate synchronizing packets

    vs. input and snapshot packets.

    They are really quite different.

    No need to combine effectively two packets into one.

    -----------------------------------------

    it certainly seems that instead of going back to a synchronization stage
    while maintaining the connection, it would be much better to just tell the
    client that they should reconnect from scratch 

    perhaps the client could bump a connection counter so we can distinguish
    repeated packets from the same connection attempt, from new packets that
    should tear down the client slot and restart it in a connection from scratch.

    I greatly prefer this to the idea that the client should have to manage
    complicated transitions in/out of synchronization state.

    in fact if this is done then the idea of "sync sequence" can just disappear.

    -----------------------------------------

    Implement small adjustments, eg. speed up n frames over x seconds, slow down etc.

    This should be only small adjustments.

    If detect that desync has occured outside of threshold for small adjustments,
    go back to synchronize state.

    Make sure that when going back to snychronize the sync offset is cleared to zero.

    -----------------------------------------

    Implement interpolation between ticks for client render, eg. fix your timestep.

    -----------------------------------------

    Might be a good idea to create server guid and stick it in connecting packets,
    as well as sync packets, this way the client cannot connect or get packets sent
    to it for long without knowing the challenge response.

    -----------------------------------------

    Get the alpha blending and color transition blending working again.

    To do this we'll need the concept of per-entity view data, eg. indexed by entity id.

    Move the client window setup and create stuff into render.cpp

    Remove the vector BS in physics_ode.cpp for the authority walk. Come up with a better data structure.

    physics_ode.cpp uses a bunch of C++ vector classes for authority walk. Can probably do better than this.

    Would be very nice to be able to connect by hostname. 

    If the address to connect to does not resolve to a valid address, try running it through DNS.

    Ideally this could be done seamlessly inside client state machine

    Ideally the DNS resolution would be non-blocking

    -----------------------------------------
