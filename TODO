DONE:

    Bring across the rest of the cube render into render.cpp

    Most brought across. Need to convert the last glm::ortho to remove that POS library.

TODO:

    Convert C++ bullshit in the load shader to stdio.

    ------------------------------

    Want to keep simulation/entity related aspects separate from the render

    Need to break out parts of the cube from "view::" namespace and consolidate.

    Need to simplify. This stuff is overly complicated and in reality does very little.

    Basically, the cube render should just take an array of cube data and a camera
    and light position and render it.

    It should be restructured around a function that just does the work and passes in
    all the things required to render it in a struct.

    There should be a create function for this struct and a free.

    This way the owner could share shaders and so on between multiple instances, or not.

    ------------------------------

    Move the client window setup and create stuff into render.cpp

    This way GLFW is not referenced anywhere except render.cpp. Is good.
    
    ------------------------------

    Hook up to input and so on.

    When bringing across input try to grab immediately key state from keyboard, don't drive it from up/down events

    Get the client to the point where it is running a basic singleplayer demo.

    ------------------------------

    Remove the simulation from the client and run it in the server

    Bring in enough networking to send packets between client and server (network.h)

    Send input across to server, using redundancy encoding for lost commands (eg. acks)

    Setup response packet from server -> client containing snapshot.

    Goal is to setup a pure client/server system (with latency here) before implementing client side prediction.

    Take time to get the jitter buffer for inputs and interpolation buffer working before going further.

    ------------------------------
