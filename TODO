DONE:

    Add code to physics manager to grab state from physics objects and update cube entities.

    Implement code to grab the render state from cube entities.

    Renamed RenderCubes to RenderState, it's now more generic. We could render more than cubes.

    Bunch of work converting over.

    Added render_get_state which takes a world struct. Generic.

    Actually instance the render object inside client.

    Bring across camera smoothing etc.

    Hook up basically minimal rendering code.

TODO:

    It should in theory be rendering now but it's not. Why not?

    ------------------------------

    Bring across authority colors and blending (in a general way such that all objects can have authority)

    ------------------------------

    Tune the client simulation now that it is running at 240HZ

    Pass over code and fix any TODOs or hacks.

    ------------------------------

    Remove the simulation from the client and run it in the server

    Bring in enough networking to send packets between client and server (network.h)

    Send input across to server, using redundancy encoding for lost commands (eg. acks)

    Setup response packet from server -> client containing snapshot.

    Goal is to setup a pure client/server system (with latency here) before implementing client side prediction.

    Take time to get the jitter buffer for inputs and interpolation buffer working before going further.

    ------------------------------
