DONE:

    Set up physics.h and physics manager. This is the physics data that shims to the simulation.

    For now bring across ODE, conversion to Rubikon comes later.

    Don't custom build a version of ODE it's simply not required. Use the brew version.

    Split up cpp into physics_ode.cpp so we can later on have a physics_rubikon.cpp implementation.

    Convert physics interface to use vectorial instead of shitty old math library.

    Clean up the physics interface.

TODO:

    ------------------------------

    Work out how cube entity interacts with physics. I think it has a physics object (index)
    and then the physics manager takes care of updating and then pushing its physics state
    back out to the relevant edict index (eg. update position, orientation, linear/ang vel)
    post simulation step.

    ------------------------------

    Bring across the game code into game.h. This is the code that takes player input and applies
    forces and so on to cubes. Structure this such that it is easily called within the context
    of client side prediction rollback.

    Ensure that game code doesn't talk to ODE directly. goes through physics.h

    ------------------------------

    Bring across cube simulation and strip it down

    Now bring across shaders and get the basic cube simulation rendering

    Hook up to input and so on.

    Should basically have the cube demo back again at this point.

    Simplify and reduce as much as possible before moving forward.

    Make sure to keep the simulation and game code separate.

    ------------------------------

    Remove the simulation from the client and run it in the server

    Bring in enough networking to send packets between client and server (network.h)

    Send input across to server, using redundancy encoding for lost commands (eg. acks)

    Setup response packet from server -> client containing snapshot.

    Goal is to setup a pure client/server system (with latency here) before implementing client side prediction.

    ------------------------------
